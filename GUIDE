#include <iostream>
#include <string>
#include <cctype>

using namespace std;

struct Node {
    string data;
    Node* next;
};

// Function declarations
void InsertAtEnd(Node** head, string newData);
void DisplayList(Node* node);
void ShowMenu();
bool IsValidUserNumber(const string& number, const string& userType);
void StudentMenu();
void TeacherMenu();
void AdminMenu();

// Main function
int main() {
    Node* userList = nullptr;
    string userNumber;
    int userType;

    ShowMenu();
    cin >> userType;
    cin.ignore(); // Ignore newline after integer input

    switch (userType) {
        case 1: // Student
            do {
                cout << "Enter your student number (2023-XXXXX): ";
                getline(cin, userNumber);
            } while (!IsValidUserNumber(userNumber, "student"));
            InsertAtEnd(&userList, userNumber);
            StudentMenu();
            break;
        case 2: // Teacher
            do {
                cout << "Enter your teacher number (XXXXX-2023): ";
                getline(cin, userNumber);
            } while (!IsValidUserNumber(userNumber, "teacher"));
            InsertAtEnd(&userList, userNumber);
            TeacherMenu();
            break;
        case 3: // Admin
            do {
                cout << "Enter your admin number (202399999): ";
                getline(cin, userNumber);
            } while (!IsValidUserNumber(userNumber, "admin"));
            InsertAtEnd(&userList, userNumber);
            AdminMenu();
            break;
        default:
            cout << "Invalid choice. Please restart the program.\n";
            return 1;
    }

    DisplayList(userList); // For demonstration purposes

    return 0;
}

// Function definitions
void InsertAtEnd(Node** head, string newData) {
    Node* newNode = new Node;
    newNode->data = newData;
    newNode->next = nullptr;

    if (*head == nullptr) {
        *head = newNode;
        return;
    }

    Node* lastNode = *head;
    while (lastNode->next != nullptr) {
        lastNode = lastNode->next;
    }
    lastNode->next = newNode;
}

void DisplayList(Node* node) {
    while (node != nullptr) {
        cout << node->data << " ";
        node = node->next;
    }
    cout << endl;
}

void ShowMenu() {
    cout << "Welcome to the School System\n";
    cout << "1. Student\n";
    cout << "2. Teacher\n";
    cout << "3. Admin\n";
    cout << "Enter your choice: ";
}

bool IsValidUserNumber(const string& number, const string& userType) {
    if (userType == "student") {
        return number.length() == 10 &&
               number.substr(0, 4) == "2023" &&
               number[4] == '-' &&
               isdigit(number[5]) &&
               isdigit(number[6]) &&
               isdigit(number[7]) &&
               isdigit(number[8]) &&
               isdigit(number[9]);
    } else if (userType == "teacher") {
        return number.length() == 10 &&
               isdigit(number[0]) &&
               isdigit(number[1]) &&
               isdigit(number[2]) &&
               isdigit(number[3]) &&
               number[4] == '-' &&
               number.substr(5, 4) == "2023";
    } else if (userType == "admin") {
        return number == "202399999";
    }
    return false;
}

void StudentMenu() {
    cout << "Student Menu Placeholder\n";
    // Implement student-specific functionalities here
}

void TeacherMenu() {
    cout << "Teacher Menu Placeholder\n";
    // Implement teacher-specific functionalities here
}

void AdminMenu() {
    cout << "Admin Menu Placeholder\n";
    // Implement admin-specific functionalities here
}




#include <iostream>

using namespace std;

// Node structure for doubly linked list
struct Node {
    int data;
    Node* prev;
    Node* next;
};

// Function to create a new node
Node* createNode(int data) {
    Node* newNode = new Node;
    newNode->data = data;
    newNode->prev = nullptr;
    newNode->next = nullptr;
    return newNode;
}

// Function to insert a node at the beginning of the list
void insertAtBeginning(Node*& head, int data) {
    Node* newNode = createNode(data);
    if (head == nullptr) {
        head = newNode;
    } else {
        newNode->next = head;
        head->prev = newNode;
        head = newNode;
    }
}

// Function to insert a node at the end of the list
void insertAtEnd(Node*& head, int data) {
    Node* newNode = createNode(data);
    if (head == nullptr) {
        head = newNode;
    } else {
        Node* temp = head;
        while (temp->next != nullptr) {
            temp = temp->next;
        }
        temp->next = newNode;
        newNode->prev = temp;
    }
}

// Function to print the doubly linked list
void printList(Node* head) {
    cout << "List: ";
    while (head != nullptr) {
        cout << head->data << " ";
        head = head->next;
    }
    cout << endl;
}

// Function to delete a node by value
void deleteNode(Node*& head, int value) {
    if (head == nullptr) {
        return;
    }
    Node* current = head;
    // Traverse the list to find the node with the given value
    while (current != nullptr && current->data != value) {
        current = current->next;
    }
    if (current == nullptr) {
        cout << "Node with value " << value << " not found." << endl;
        return;
    }
    // Adjust the pointers to delete the node
    if (current->prev != nullptr) {
        current->prev->next = current->next;
    } else {
        head = current->next;
    }
    if (current->next != nullptr) {
        current->next->prev = current->prev;
    }
    delete current;
}

// Function to update a node's value
void updateNode(Node* head, int oldValue, int newValue) {
    while (head != nullptr) {
        if (head->data == oldValue) {
            head->data = newValue;
            return;
        }
        head = head->next;
    }
    cout << "Node with value " << oldValue << " not found." << endl;
}

int main() {
    Node* head = nullptr; // Initialize an empty doubly linked list

    // Insert nodes
    insertAtEnd(head, 10);
    insertAtEnd(head, 20);
    insertAtEnd(head, 30);
    insertAtBeginning(head, 5);

    // Print the list
    printList(head);

    // Delete a node
    deleteNode(head, 20);
    printList(head);

    // Update a node
    updateNode(head, 30, 25);
    printList(head);

    return 0;
}
